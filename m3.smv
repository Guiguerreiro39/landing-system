MODULE main

DEFINE
    BUTTON_CHANGES := button != next(button);
    SWAP_READY := ready_for = extended_ready ? retracted_ready : extended_ready;
    SWAP_GEARS := gstate = extended ? retracted : extended;

    PRE_OPEN_UP := phase = moving_up & ready_for = extended_ready;
    POS_OPEN_UP := phase = moving_up & ready_for = retracted_ready;
    PRE_OPEN_DN := phase = moving_down & ready_for = retracted_ready;
    POS_OPEN_DN := phase = moving_down & ready_for = extended_ready;

    PRE_OPEN := PRE_OPEN_UP | PRE_OPEN_DN;
    POS_OPEN := POS_OPEN_UP | POS_OPEN_DN;

    -- Fases em que é possível começar o ciclo de retracção/extensão das engrenagens.
    RETRACTION_INIT := PRE_OPEN_UP & dstate = closed & lstate = unlocked;
    EXTENSION_INIT :=  PRE_OPEN_DN & dstate = closed & lstate = unlocked;

VAR
    button: {down, up};
    phase: {moving_down, halt_down, moving_up, halt_up};

    dstate: {open, closed};
    lstate: {locked, unlocked};
    ready_for: {retracted_ready, extended_ready};
    interruptible: boolean;
    -- Variável sobre o estado das engrenagens.
    gstate: {extended, extending, retracted, retracting, none};

ASSIGN
    init(button) := down;
    init(phase) := halt_down;
    init(dstate) := closed;
    init(lstate) := locked;
    init(ready_for) := extended_ready;
    init(interruptible) := TRUE;
    init(gstate) := extended;

    next(phase) := case BUTTON_CHANGES & button = down: moving_up;
                        BUTTON_CHANGES & button = up: moving_down;

                        !BUTTON_CHANGES & dstate = closed & POS_OPEN_UP: halt_up;
                        !BUTTON_CHANGES & dstate = closed & POS_OPEN_DN: halt_down;

                        TRUE: phase;
                   esac;

    next(dstate) := case !BUTTON_CHANGES & dstate = open & interruptible = TRUE: closed;
                         -- Portas abrem quando entra no ciclo de extensão/retracção
                         !BUTTON_CHANGES & (RETRACTION_INIT | EXTENSION_INIT): open;

                         TRUE: dstate;
                    esac;

    next(lstate) := case !BUTTON_CHANGES & lstate = locked & PRE_OPEN: unlocked;
                         !BUTTON_CHANGES & lstate = unlocked & dstate = closed & POS_OPEN: locked;

                         TRUE: lstate;
                    esac;

    next(interruptible) := case BUTTON_CHANGES & dstate = closed & lstate = locked & phase in {moving_up, moving_down}: FALSE;
                                dstate = closed & lstate = locked & interruptible = FALSE: TRUE;

                                -- Quando inicia a retracção/extensão das engrenagens
                                !BUTTON_CHANGES & (RETRACTION_INIT | EXTENSION_INIT): FALSE;
                                -- Quando acaba a retracção/extensão das engrenagens
                                gstate in {retracting, extending}: TRUE;

                                TRUE: interruptible;
                           esac;

    next(ready_for) := case BUTTON_CHANGES & dstate = open: SWAP_READY;
                            -- Quando entra no estado opening_DN ou opening_UP
                            !BUTTON_CHANGES & RETRACTION_INIT: retracted_ready;
                            !BUTTON_CHANGES & EXTENSION_INIT: extended_ready;
            
                            TRUE: ready_for;
                        esac;

    next(gstate) := case -- Extensão/Retracção das engrenagens
                         gstate = retracted & phase = moving_down & ready_for = extended_ready: extending;
                         gstate = extending: extended;
                         -- Finalização do ciclo
                         gstate = extended & phase = moving_up & ready_for = retracted_ready: retracting;
                         gstate = retracting: retracted;
                         -- Se o botão mudar, as engrenagens também mudam
                         BUTTON_CHANGES & dstate = open: SWAP_GEARS;

                         TRUE: gstate;
                    esac;

TRANS
    !interruptible -> next(button) = button;

LTLSPEC
    G (G button = down -> F (phase = halt_down & dstate = closed & lstate = locked))

LTLSPEC
    G (G button = up -> F (phase = halt_up & dstate = closed & lstate = locked))

LTLSPEC
    -- R21: Se o botão estiver para baixo então a fase de retracção não se verifica.
    G (G button = down -> gstate != retracting)

LTLSPEC
    -- R22: Se o botão estiver para cima então a fase de extensão não se verifica.
    G (G button = up -> gstate != extending)


LTLSPEC
    G (button = down -> phase != moving_up & phase != halt_up)

LTLSPEC
    G (button = up -> phase != moving_down & phase != halt_down)

LTLSPEC
    G (phase = moving_up -> button = up)

LTLSPEC
    G (phase = moving_down -> button = down)

LTLSPEC
    G (dstate = open -> lstate = unlocked)
LTLSPEC
    G (lstate = locked -> dstate = closed)

LTLSPEC
    -- M3_inv2
    G (dstate = closed & gstate != retracted -> gstate = extended)

LTLSPEC
    -- M3_inv3
    G (dstate = closed & gstate != extended -> gstate = retracted)

LTLSPEC
    -- M3_inv4
    G (!(gstate in {retracted, extended}) -> dstate = open)

LTLSPEC
    -- M3_inv5
    G (dstate = closed -> !(gstate in {extending, retracting}))
