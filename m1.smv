MODULE main

VAR
    -- 'button' representa o estado do botão, o qual depende da ação do piloto. 
    button: {down, up};

    -- 'phase' representa o estado do sistema de aterragem.
    phase: {moving_down, halt_down, moving_up, halt_up};

ASSIGN
    init(button) := up;
    init(phase) := halt_up;

    -- Após o estado inicial, 'button' pode tomar qualquer um dos valores cima/baixo.

    next(phase) := case phase = moving_down & next(button) = down: halt_down;
                        phase = moving_up & next(button) = up: halt_up;

                        phase in {moving_down, halt_down} & next(button) = up: moving_up;
                        phase in {moving_up, halt_up} & next(button) = down: moving_down;

                        TRUE: phase;
                    esac;

LTLSPEC
    -- R11bis: Para todos os estado, se o botão estiver para baixo e continuar para baixo, 
    -- então eventualmente vamos chegar à fase halt_down.
    G (button = down & next(button) = down -> F phase = halt_down)

LTLSPEC
    -- R12bis: Para todos os estados, se o botão estiver para cima e continuar para cima,
    -- então eventualmente vamos chegar à fase halt_up.
    G (button = up & next(button) = up -> F phase = halt_up)

LTLSPEC
    -- Inv3: Para todos os estados em que a fase é 'moving_up', o botão está para cima
    G (phase = moving_up -> button = up)

LTLSPEC
    -- Inv4: Para todos os estados em que a fase é 'moving_down', o botão está para baixo
    G (phase = moving_down -> button = down)

LTLSPEC
    -- Inv5: Para todos os estados em que o botão está para baixo, a fase não é nem
    -- 'moving_up' nem 'halt_up'.
    G (button = down -> phase != moving_up & phase != halt_up)

LTLSPEC
    -- Inv5: Para todos os estados em que o botão está para cima, a fase não é nem
    -- 'moving_down' nem 'halt_down'.
    G (button = up -> phase != moving_down & phase != halt_down)
